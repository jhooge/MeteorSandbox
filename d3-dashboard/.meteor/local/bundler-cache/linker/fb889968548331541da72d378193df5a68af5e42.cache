[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\n\n/* Package-scope variables */\nvar getFilterQuery, ReactiveTable, dependOnFilters, getFilterStrings, getFilterFields;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aslagle_reactive-table/lib/filter.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar parseFilterString = function (filterString) {                                                                      // 1\n  var startQuoteRegExp = /^[\\'\\\"]/;                                                                                    // 2\n  var endQuoteRegExp = /[\\'\\\"]$/;                                                                                      // 3\n  var filters = [];                                                                                                    // 4\n  var words = filterString.split(' ');                                                                                 // 5\n                                                                                                                       // 6\n  var inQuote = false;                                                                                                 // 7\n  var quotedWord = '';                                                                                                 // 8\n  _.each(words, function (word) {                                                                                      // 9\n    if (inQuote) {                                                                                                     // 10\n      if (endQuoteRegExp.test(word)) {                                                                                 // 11\n        filters.push(quotedWord + ' ' + word.slice(0, word.length - 1));                                               // 12\n        inQuote = false;                                                                                               // 13\n        quotedWord = '';                                                                                               // 14\n      } else {                                                                                                         // 15\n        quotedWord = quotedWord + ' ' + word;                                                                          // 16\n      }                                                                                                                // 17\n    } else if (startQuoteRegExp.test(word)) {                                                                          // 18\n      if (endQuoteRegExp.test(word)) {                                                                                 // 19\n        filters.push(word.slice(1, word.length - 1));                                                                  // 20\n      } else {                                                                                                         // 21\n        inQuote = true;                                                                                                // 22\n        quotedWord = word.slice(1, word.length);                                                                       // 23\n      }                                                                                                                // 24\n    } else {                                                                                                           // 25\n      filters.push(word);                                                                                              // 26\n    }                                                                                                                  // 27\n  });                                                                                                                  // 28\n  return filters;                                                                                                      // 29\n};                                                                                                                     // 30\n                                                                                                                       // 31\nvar escapeRegex = function(text) {                                                                                     // 32\n  return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");                                                             // 33\n};                                                                                                                     // 34\n                                                                                                                       // 35\nvar getFieldMatches = function (field) {                                                                               // 36\n  var fieldMatches = [];                                                                                               // 37\n  var keys = field.split('.');                                                                                         // 38\n  var previousKeys = '';                                                                                               // 39\n  _.each(keys, function (key) {                                                                                        // 40\n    fieldMatches.push(previousKeys + key);                                                                             // 41\n    previousKeys += key + '.';                                                                                         // 42\n  });                                                                                                                  // 43\n  return fieldMatches;                                                                                                 // 44\n};                                                                                                                     // 45\n                                                                                                                       // 46\ngetFilterQuery = function (filterInputs, filterFields, settings) {                                                     // 47\n  settings = settings || {};                                                                                           // 48\n  if (settings.enableRegex === undefined) {                                                                            // 49\n    settings.enableRegex = false;                                                                                      // 50\n  }                                                                                                                    // 51\n  if (settings.filterOperator === undefined) {                                                                         // 52\n    settings.filterOperator = \"$and\";                                                                                  // 53\n  }                                                                                                                    // 54\n  if (settings.fields) {                                                                                               // 55\n    _.each(filterInputs, function (filter, index) {                                                                    // 56\n      if (_.any(settings.fields, function (include) { return include; })) {                                            // 57\n        filterFields[index] = _.filter(filterFields[index], function (field) {                                         // 58\n          return _.any(getFieldMatches(field), function (fieldMatch) {                                                 // 59\n            return settings.fields[fieldMatch];                                                                        // 60\n          });                                                                                                          // 61\n        });                                                                                                            // 62\n      } else {                                                                                                         // 63\n        filterFields[index] = _.filter(filterFields[index], function (field) {                                         // 64\n          return _.all(getFieldMatches(field), function (fieldMatch) {                                                 // 65\n            return _.isUndefined(settings.fields[fieldMatch]) || settings.fields[fieldMatch];                          // 66\n          });                                                                                                          // 67\n        });                                                                                                            // 68\n      }                                                                                                                // 69\n    });                                                                                                                // 70\n  }                                                                                                                    // 71\n  var numberRegExp = /^\\d+$/;                                                                                          // 72\n  var queryList = [];                                                                                                  // 73\n  _.each(filterInputs, function (filter, index) {                                                                      // 74\n    if (filter) {                                                                                                      // 75\n      if (_.isObject(filter)) {                                                                                        // 76\n        var fieldQueries = _.map(filterFields[index], function (field) {                                               // 77\n          var query = {};                                                                                              // 78\n          query[field] = filter;                                                                                       // 79\n          return query;                                                                                                // 80\n        });                                                                                                            // 81\n        if (fieldQueries.length) {                                                                                     // 82\n            queryList.push({'$or': fieldQueries});                                                                     // 83\n          }                                                                                                            // 84\n      } else {                                                                                                         // 85\n        var filters = parseFilterString(filter);                                                                       // 86\n        _.each(filters, function (filterWord) {                                                                        // 87\n          if (settings.enableRegex === false) {                                                                        // 88\n            filterWord = escapeRegex(filterWord);                                                                      // 89\n          }                                                                                                            // 90\n          var filterQueryList = [];                                                                                    // 91\n          _.each(filterFields[index], function (field) {                                                               // 92\n            var filterRegExp = new RegExp(filterWord, 'i');                                                            // 93\n            var query = {};                                                                                            // 94\n            query[field] = filterRegExp;                                                                               // 95\n            filterQueryList.push(query);                                                                               // 96\n                                                                                                                       // 97\n            if (numberRegExp.test(filterWord)) {                                                                       // 98\n              var numberQuery = {};                                                                                    // 99\n              numberQuery[field] = parseInt(filterWord, 10);                                                           // 100\n              filterQueryList.push(numberQuery);                                                                       // 101\n            }                                                                                                          // 102\n                                                                                                                       // 103\n            if (filterWord === \"true\") {                                                                               // 104\n              var boolQuery = {};                                                                                      // 105\n              boolQuery[field] = true;                                                                                 // 106\n              filterQueryList.push(boolQuery);                                                                         // 107\n            } else if (filterWord === \"false\") {                                                                       // 108\n              var boolQuery = {};                                                                                      // 109\n              boolQuery[field] = false;                                                                                // 110\n              filterQueryList.push(boolQuery);                                                                         // 111\n            }                                                                                                          // 112\n          });                                                                                                          // 113\n                                                                                                                       // 114\n          if (filterQueryList.length) {                                                                                // 115\n            var filterQuery = {'$or': filterQueryList};                                                                // 116\n            queryList.push(filterQuery);                                                                               // 117\n          }                                                                                                            // 118\n        });                                                                                                            // 119\n      }                                                                                                                // 120\n    }                                                                                                                  // 121\n  });                                                                                                                  // 122\n                                                                                                                       // 123\n  var query = {};                                                                                                      // 124\n                                                                                                                       // 125\n  if(queryList.length) {                                                                                               // 126\n    query[settings.filterOperator] = queryList;                                                                        // 127\n  }                                                                                                                    // 128\n                                                                                                                       // 129\n  return query;                                                                                                        // 130\n};                                                                                                                     // 131\n                                                                                                                       // 132\nif (Meteor.isClient) {                                                                                                 // 133\n  ReactiveTable = ReactiveTable || {};                                                                                 // 134\n                                                                                                                       // 135\n  var reactiveTableFilters = {};                                                                                       // 136\n  var callbacks = {};                                                                                                  // 137\n                                                                                                                       // 138\n  ReactiveTable.Filter = function (id, fields) {                                                                       // 139\n    if (reactiveTableFilters[id]) {                                                                                    // 140\n        return reactiveTableFilters[id];                                                                               // 141\n    }                                                                                                                  // 142\n                                                                                                                       // 143\n    var filter = new ReactiveVar();                                                                                    // 144\n                                                                                                                       // 145\n    this.fields = fields;                                                                                              // 146\n                                                                                                                       // 147\n    this.get = function () {                                                                                           // 148\n      return filter.get() || '';                                                                                       // 149\n    };                                                                                                                 // 150\n                                                                                                                       // 151\n    this.set = function (filterString) {                                                                               // 152\n      filter.set(filterString);                                                                                        // 153\n      _.each(callbacks[id], function (callback) {                                                                      // 154\n        callback();                                                                                                    // 155\n      });                                                                                                              // 156\n    };                                                                                                                 // 157\n                                                                                                                       // 158\n    reactiveTableFilters[id] = this;                                                                                   // 159\n  };                                                                                                                   // 160\n                                                                                                                       // 161\n  ReactiveTable.clearFilters = function (filterIds) {                                                                  // 162\n    _.each(filterIds, function (filterId) {                                                                            // 163\n      if (reactiveTableFilters[filterId]) {                                                                            // 164\n        reactiveTableFilters[filterId].set('');                                                                        // 165\n      }                                                                                                                // 166\n    });                                                                                                                // 167\n  };                                                                                                                   // 168\n                                                                                                                       // 169\n  dependOnFilters = function (filterIds, callback) {                                                                   // 170\n    _.each(filterIds, function (filterId) {                                                                            // 171\n      if (_.isUndefined(callbacks[filterId])) {                                                                        // 172\n        callbacks[filterId] = [];                                                                                      // 173\n      }                                                                                                                // 174\n      callbacks[filterId].push(callback);                                                                              // 175\n    });                                                                                                                // 176\n  };                                                                                                                   // 177\n                                                                                                                       // 178\n  getFilterStrings = function (filterIds) {                                                                            // 179\n    return _.map(filterIds, function (filterId) {                                                                      // 180\n      if (_.isUndefined(reactiveTableFilters[filterId])) {                                                             // 181\n        return '';                                                                                                     // 182\n      }                                                                                                                // 183\n      return reactiveTableFilters[filterId].get();                                                                     // 184\n    });                                                                                                                // 185\n  };                                                                                                                   // 186\n                                                                                                                       // 187\n  getFilterFields = function (filterIds, allFields) {                                                                  // 188\n    return _.map(filterIds, function (filterId) {                                                                      // 189\n      if (_.isUndefined(reactiveTableFilters[filterId])) {                                                             // 190\n        return _.map(allFields, function (field) { return field.key; });                                               // 191\n      } else if (_.isEmpty(reactiveTableFilters[filterId].fields)) {                                                   // 192\n        return _.map(allFields, function (field) { return field.key; });                                               // 193\n      } else {                                                                                                         // 194\n        return reactiveTableFilters[filterId].fields;                                                                  // 195\n      }                                                                                                                // 196\n    });                                                                                                                // 197\n  };                                                                                                                   // 198\n                                                                                                                       // 199\n  Template.reactiveTableFilter.helpers({                                                                               // 200\n    'class': function () {                                                                                             // 201\n      return this.class || 'input-group';                                                                              // 202\n    },                                                                                                                 // 203\n                                                                                                                       // 204\n    'filter': function () {                                                                                            // 205\n      if (_.isUndefined(reactiveTableFilters[this.id])) {                                                              // 206\n        new ReactiveTable.Filter(this.id, this.fields);                                                                // 207\n      }                                                                                                                // 208\n      return reactiveTableFilters[this.id].get();                                                                      // 209\n    }                                                                                                                  // 210\n  });                                                                                                                  // 211\n                                                                                                                       // 212\n  var updateFilter = _.debounce(function (template, filterText) {                                                      // 213\n    reactiveTableFilters[template.data.id].set(filterText);                                                            // 214\n  }, 200);                                                                                                             // 215\n                                                                                                                       // 216\n  Template.reactiveTableFilter.events({                                                                                // 217\n    'keyup .reactive-table-input, input .reactive-table-input': function (event) {                                     // 218\n      var template = Template.instance();                                                                              // 219\n      var filterText = $(event.target).val();                                                                          // 220\n      updateFilter(template, filterText);                                                                              // 221\n    },                                                                                                                 // 222\n  });                                                                                                                  // 223\n}                                                                                                                      // 224\n                                                                                                                       // 225\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aslagle_reactive-table/lib/server.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nReactiveTable = {};                                                                                                    // 1\n                                                                                                                       // 2\nReactiveTable.publish = function (name, collectionOrFunction, selectorOrFunction, settings) {                          // 3\n    Meteor.publish(\"reactive-table-\" + name, function (publicationId, filters, fields, options, rowsPerPage) {         // 4\n      check(publicationId, String);                                                                                    // 5\n      check(filters, [Match.OneOf(String, Object, Mongo.ObjectID)]);                                                   // 6\n      check(fields, [[String]]);                                                                                       // 7\n      check(options, {skip: Match.Integer, limit: Match.Integer, sort: Object});                                       // 8\n      check(rowsPerPage, Match.Integer);                                                                               // 9\n                                                                                                                       // 10\n      var collection;                                                                                                  // 11\n      var selector;                                                                                                    // 12\n                                                                                                                       // 13\n      if (_.isFunction(collectionOrFunction)) {                                                                        // 14\n        collection = collectionOrFunction.call(this);                                                                  // 15\n      } else {                                                                                                         // 16\n        collection = collectionOrFunction;                                                                             // 17\n      }                                                                                                                // 18\n                                                                                                                       // 19\n      if (!(collection instanceof Mongo.Collection)) {                                                                 // 20\n        console.log(\"ReactiveTable.publish: no collection to publish\");                                                // 21\n        return [];                                                                                                     // 22\n      }                                                                                                                // 23\n                                                                                                                       // 24\n      if (_.isFunction(selectorOrFunction)) {                                                                          // 25\n        selector = selectorOrFunction.call(this);                                                                      // 26\n      } else {                                                                                                         // 27\n        selector = selectorOrFunction;                                                                                 // 28\n      }                                                                                                                // 29\n      var self = this;                                                                                                 // 30\n      var filterQuery = _.extend(getFilterQuery(filters, fields, settings), selector);                                 // 31\n      if (settings && settings.fields) {                                                                               // 32\n        options.fields = settings.fields;                                                                              // 33\n      }                                                                                                                // 34\n      var pageCursor = collection.find(filterQuery, options);                                                          // 35\n      var fullCursor = collection.find(filterQuery);                                                                   // 36\n      var count = fullCursor.count();                                                                                  // 37\n                                                                                                                       // 38\n      var getRow = function (row, index) {                                                                             // 39\n        return _.extend({                                                                                              // 40\n          \"reactive-table-id\": publicationId,                                                                          // 41\n          \"reactive-table-sort\": index                                                                                 // 42\n        }, row);                                                                                                       // 43\n      };                                                                                                               // 44\n                                                                                                                       // 45\n      var getRows = function () {                                                                                      // 46\n        return _.map(pageCursor.fetch(), getRow);                                                                      // 47\n      };                                                                                                               // 48\n      var rows = {};                                                                                                   // 49\n      _.each(getRows(), function (row) {                                                                               // 50\n        rows[row._id] = row;                                                                                           // 51\n      });                                                                                                              // 52\n                                                                                                                       // 53\n      var updateRows = function () {                                                                                   // 54\n        var newRows = getRows();                                                                                       // 55\n        _.each(newRows, function (row, index) {                                                                        // 56\n          var oldRow = rows[row._id];                                                                                  // 57\n          if (oldRow) {                                                                                                // 58\n            if (!_.isEqual(oldRow, row)) {                                                                             // 59\n              self.changed(\"reactive-table-rows-\" + publicationId, row._id, row);                                      // 60\n              rows[row._id] = row;                                                                                     // 61\n            }                                                                                                          // 62\n          } else {                                                                                                     // 63\n            self.added(\"reactive-table-rows-\" + publicationId, row._id, row);                                          // 64\n            rows[row._id] = row;                                                                                       // 65\n          }                                                                                                            // 66\n        });                                                                                                            // 67\n      };                                                                                                               // 68\n                                                                                                                       // 69\n      self.added(\"reactive-table-counts\", publicationId, {count: count});                                              // 70\n      _.each(rows, function (row) {                                                                                    // 71\n        self.added(\"reactive-table-rows-\" + publicationId, row._id, row);                                              // 72\n      });                                                                                                              // 73\n                                                                                                                       // 74\n      var initializing = true;                                                                                         // 75\n                                                                                                                       // 76\n      var handle = pageCursor.observeChanges({                                                                         // 77\n        added: function (id, fields) {                                                                                 // 78\n          if (!initializing) {                                                                                         // 79\n            updateRows();                                                                                              // 80\n          }                                                                                                            // 81\n        },                                                                                                             // 82\n                                                                                                                       // 83\n        removed: function (id, fields) {                                                                               // 84\n          self.removed(\"reactive-table-rows-\" + publicationId, id);                                                    // 85\n          delete rows[id];                                                                                             // 86\n          updateRows();                                                                                                // 87\n        },                                                                                                             // 88\n                                                                                                                       // 89\n        changed: function (id, fields) {                                                                               // 90\n          updateRows();                                                                                                // 91\n        }                                                                                                              // 92\n                                                                                                                       // 93\n      });                                                                                                              // 94\n                                                                                                                       // 95\n      var countHandle = fullCursor.observeChanges({                                                                    // 96\n          added: function (id, fields) {                                                                               // 97\n              if (!initializing) {                                                                                     // 98\n                  self.changed(\"reactive-table-counts\", publicationId, {count: fullCursor.count()});                  \n              }                                                                                                        // 100\n          },                                                                                                           // 101\n                                                                                                                       // 102\n          removed: function (id, fields) {                                                                             // 103\n              self.changed(\"reactive-table-counts\", publicationId, {count: fullCursor.count()});                       // 104\n          }                                                                                                            // 105\n      });                                                                                                              // 106\n      initializing = false;                                                                                            // 107\n                                                                                                                       // 108\n      self.ready();                                                                                                    // 109\n                                                                                                                       // 110\n      self.onStop(function () {                                                                                        // 111\n        handle.stop();                                                                                                 // 112\n        countHandle.stop();                                                                                            // 113\n      });                                                                                                              // 114\n    });                                                                                                                // 115\n};                                                                                                                     // 116\n                                                                                                                       // 117\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['aslagle:reactive-table'] = {\n  ReactiveTable: ReactiveTable\n};\n\n})();\n","servePath":"/packages/aslagle_reactive-table.js","sourceMap":{"version":3,"sources":["/packages/aslagle_reactive-table/lib/filter.js","/packages/aslagle_reactive-table/lib/server.js"],"names":[],"mappingshOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H","file":"/packages/aslagle_reactive-table.js","sourcesContent":["var parseFilterString = function (filterString) {\n  var startQuoteRegExp = /^[\\'\\\"]/;\n  var endQuoteRegExp = /[\\'\\\"]$/;\n  var filters = [];\n  var words = filterString.split(' ');\n\n  var inQuote = false;\n  var quotedWord = '';\n  _.each(words, function (word) {\n    if (inQuote) {\n      if (endQuoteRegExp.test(word)) {\n        filters.push(quotedWord + ' ' + word.slice(0, word.length - 1));\n        inQuote = false;\n        quotedWord = '';\n      } else {\n        quotedWord = quotedWord + ' ' + word;\n      }\n    } else if (startQuoteRegExp.test(word)) {\n      if (endQuoteRegExp.test(word)) {\n        filters.push(word.slice(1, word.length - 1));\n      } else {\n        inQuote = true;\n        quotedWord = word.slice(1, word.length);\n      }\n    } else {\n      filters.push(word);\n    }\n  });\n  return filters;\n};\n\nvar escapeRegex = function(text) {\n  return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n};\n\nvar getFieldMatches = function (field) {\n  var fieldMatches = [];\n  var keys = field.split('.');\n  var previousKeys = '';\n  _.each(keys, function (key) {\n    fieldMatches.push(previousKeys + key);\n    previousKeys += key + '.';\n  });\n  return fieldMatches;\n};\n\ngetFilterQuery = function (filterInputs, filterFields, settings) {\n  settings = settings || {};\n  if (settings.enableRegex === undefined) {\n    settings.enableRegex = false;\n  }\n  if (settings.filterOperator === undefined) {\n    settings.filterOperator = \"$and\";\n  }\n  if (settings.fields) {\n    _.each(filterInputs, function (filter, index) {\n      if (_.any(settings.fields, function (include) { return include; })) {\n        filterFields[index] = _.filter(filterFields[index], function (field) {\n          return _.any(getFieldMatches(field), function (fieldMatch) {\n            return settings.fields[fieldMatch];\n          });\n        });\n      } else {\n        filterFields[index] = _.filter(filterFields[index], function (field) {\n          return _.all(getFieldMatches(field), function (fieldMatch) {\n            return _.isUndefined(settings.fields[fieldMatch]) || settings.fields[fieldMatch];\n          });\n        });\n      }\n    });\n  }\n  var numberRegExp = /^\\d+$/;\n  var queryList = [];\n  _.each(filterInputs, function (filter, index) {\n    if (filter) {\n      if (_.isObject(filter)) {\n        var fieldQueries = _.map(filterFields[index], function (field) {\n          var query = {};\n          query[field] = filter;\n          return query;\n        });\n        if (fieldQueries.length) {\n            queryList.push({'$or': fieldQueries});\n          }\n      } else {\n        var filters = parseFilterString(filter);\n        _.each(filters, function (filterWord) {\n          if (settings.enableRegex === false) {\n            filterWord = escapeRegex(filterWord);\n          }\n          var filterQueryList = [];\n          _.each(filterFields[index], function (field) {\n            var filterRegExp = new RegExp(filterWord, 'i');\n            var query = {};\n            query[field] = filterRegExp;\n            filterQueryList.push(query);\n\n            if (numberRegExp.test(filterWord)) {\n              var numberQuery = {};\n              numberQuery[field] = parseInt(filterWord, 10);\n              filterQueryList.push(numberQuery);\n            }\n\n            if (filterWord === \"true\") {\n              var boolQuery = {};\n              boolQuery[field] = true;\n              filterQueryList.push(boolQuery);\n            } else if (filterWord === \"false\") {\n              var boolQuery = {};\n              boolQuery[field] = false;\n              filterQueryList.push(boolQuery);\n            }\n          });\n\n          if (filterQueryList.length) {\n            var filterQuery = {'$or': filterQueryList};\n            queryList.push(filterQuery);\n          }\n        });\n      }\n    }\n  });\n\n  var query = {};\n\n  if(queryList.length) {\n    query[settings.filterOperator] = queryList;\n  }\n\n  return query;\n};\n\nif (Meteor.isClient) {\n  ReactiveTable = ReactiveTable || {};\n\n  var reactiveTableFilters = {};\n  var callbacks = {};\n\n  ReactiveTable.Filter = function (id, fields) {\n    if (reactiveTableFilters[id]) {\n        return reactiveTableFilters[id];\n    }\n      \n    var filter = new ReactiveVar();\n\n    this.fields = fields;\n\n    this.get = function () {\n      return filter.get() || '';\n    };\n\n    this.set = function (filterString) {\n      filter.set(filterString);\n      _.each(callbacks[id], function (callback) {\n        callback();\n      });\n    };\n      \n    reactiveTableFilters[id] = this;\n  };\n    \n  ReactiveTable.clearFilters = function (filterIds) {\n    _.each(filterIds, function (filterId) {\n      if (reactiveTableFilters[filterId]) {\n        reactiveTableFilters[filterId].set('');\n      }\n    });\n  };\n\n  dependOnFilters = function (filterIds, callback) {\n    _.each(filterIds, function (filterId) {\n      if (_.isUndefined(callbacks[filterId])) {\n        callbacks[filterId] = [];\n      }\n      callbacks[filterId].push(callback);\n    });\n  };\n\n  getFilterStrings = function (filterIds) {\n    return _.map(filterIds, function (filterId) {\n      if (_.isUndefined(reactiveTableFilters[filterId])) {\n        return '';\n      }\n      return reactiveTableFilters[filterId].get();\n    });\n  };\n\n  getFilterFields = function (filterIds, allFields) {\n    return _.map(filterIds, function (filterId) {\n      if (_.isUndefined(reactiveTableFilters[filterId])) {\n        return _.map(allFields, function (field) { return field.key; });\n      } else if (_.isEmpty(reactiveTableFilters[filterId].fields)) {\n        return _.map(allFields, function (field) { return field.key; });\n      } else {\n        return reactiveTableFilters[filterId].fields;\n      }\n    });\n  };\n\n  Template.reactiveTableFilter.helpers({\n    'class': function () {\n      return this.class || 'input-group';\n    },\n    \n    'filter': function () {\n      if (_.isUndefined(reactiveTableFilters[this.id])) {\n        new ReactiveTable.Filter(this.id, this.fields);\n      }\n      return reactiveTableFilters[this.id].get();\n    }\n  });\n\n  var updateFilter = _.debounce(function (template, filterText) {\n    reactiveTableFilters[template.data.id].set(filterText);\n  }, 200);\n\n  Template.reactiveTableFilter.events({\n    'keyup .reactive-table-input, input .reactive-table-input': function (event) {\n      var template = Template.instance();\n      var filterText = $(event.target).val();\n      updateFilter(template, filterText);\n    },\n  });\n}\n","ReactiveTable = {};\n\nReactiveTable.publish = function (name, collectionOrFunction, selectorOrFunction, settings) {\n    Meteor.publish(\"reactive-table-\" + name, function (publicationId, filters, fields, options, rowsPerPage) {\n      check(publicationId, String);\n      check(filters, [Match.OneOf(String, Object, Mongo.ObjectID)]);\n      check(fields, [[String]]);\n      check(options, {skip: Match.Integer, limit: Match.Integer, sort: Object});\n      check(rowsPerPage, Match.Integer);\n\n      var collection;\n      var selector;\n      \n      if (_.isFunction(collectionOrFunction)) {\n        collection = collectionOrFunction.call(this);\n      } else {\n        collection = collectionOrFunction;\n      }\n\n      if (!(collection instanceof Mongo.Collection)) {\n        console.log(\"ReactiveTable.publish: no collection to publish\");\n        return [];\n      }\n\n      if (_.isFunction(selectorOrFunction)) {\n        selector = selectorOrFunction.call(this);\n      } else {\n        selector = selectorOrFunction;\n      }\n      var self = this;\n      var filterQuery = _.extend(getFilterQuery(filters, fields, settings), selector);\n      if (settings && settings.fields) {\n        options.fields = settings.fields;\n      }\n      var pageCursor = collection.find(filterQuery, options);\n      var fullCursor = collection.find(filterQuery);\n      var count = fullCursor.count();\n\n      var getRow = function (row, index) {\n        return _.extend({\n          \"reactive-table-id\": publicationId,\n          \"reactive-table-sort\": index\n        }, row);\n      };\n\n      var getRows = function () {\n        return _.map(pageCursor.fetch(), getRow);\n      };\n      var rows = {};\n      _.each(getRows(), function (row) {\n        rows[row._id] = row;\n      });\n\n      var updateRows = function () {\n        var newRows = getRows();\n        _.each(newRows, function (row, index) {\n          var oldRow = rows[row._id];\n          if (oldRow) {\n            if (!_.isEqual(oldRow, row)) {\n              self.changed(\"reactive-table-rows-\" + publicationId, row._id, row);\n              rows[row._id] = row;\n            }\n          } else {\n            self.added(\"reactive-table-rows-\" + publicationId, row._id, row);\n            rows[row._id] = row;\n          }\n        });\n      };\n\n      self.added(\"reactive-table-counts\", publicationId, {count: count});\n      _.each(rows, function (row) {\n        self.added(\"reactive-table-rows-\" + publicationId, row._id, row);\n      });\n\n      var initializing = true;\n\n      var handle = pageCursor.observeChanges({\n        added: function (id, fields) {\n          if (!initializing) {\n            updateRows();\n          }\n        },\n\n        removed: function (id, fields) {\n          self.removed(\"reactive-table-rows-\" + publicationId, id);\n          delete rows[id];\n          updateRows();\n        },\n\n        changed: function (id, fields) {\n          updateRows();\n        }\n\n      });\n\n      var countHandle = fullCursor.observeChanges({\n          added: function (id, fields) {\n              if (!initializing) {\n                  self.changed(\"reactive-table-counts\", publicationId, {count: fullCursor.count()});                  \n              }\n          },\n\n          removed: function (id, fields) {\n              self.changed(\"reactive-table-counts\", publicationId, {count: fullCursor.count()});          \n          }\n      });\n      initializing = false;\n\n      self.ready();\n\n      self.onStop(function () {\n        handle.stop();\n        countHandle.stop();\n      });\n    });\n};\n"]}}]